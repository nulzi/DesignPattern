youtube 코드없는 프로그래밍
responsibility 개념을 가지는 module들의 chain
if ~ else if ~를 각 module을 만들어서 chain
chain의 형태가 다양하게 가능하다. 예를 들면, 트리형태, 역방향, 1차원 배열 등 원하는 형식의 chain을 만들어서 사용
그리고 넘겨주는 데이터 또한 모든 module들을 지나게 할 수도 있고, 하나의 module에서 작동시 데이터 전송을 막을 수 있다. 이를 이용하면 하나의 데이터를 이용해 여러 모듈들의 결과를 출력할 수 있다.
예제 - 결제 방식: 결제 방식에 따른 module들을 만들어서 요청 사항에 따라 결제가 다르게 되도록 한다. cash handler, creditcard handler, debitcard handler.
youtube GIS DEVELOPER
책임 == 무언가를 처리하는 기능(클래스)
여러 책임들을 동적으로 연결해서 순차적으로 실행하는 패턴
기능을 클래스 별로 분리하여 구현하도록 유도하므로 클래스의 코드가 최적화됨
ex) URL(프로토콜>도메인>포트), 신용카드(국민카드>신한카드>삼성카드>현대카드)
예제 - url 인식 방법
blog
장점
-요청을 보낸 쪽과 받는 쪽을 분리할 수 있다.
-구조가 다른 클래스에 대해 낮은 결합도로 동일한 이벤트에 대한 핸들링 가능.
-사슬에 들어가는 책임(객체, 클래스)를 바꾸거나 순서를 바꿈으로써 역할을 동적으로 추가/제거 가능 >> *변화가 전체구조에 아무런 영향을 주지 않는다는 점에서 객체지향적인 목적 달성
-사슬의 구조를 몰라도 되고 그 사슬에 들어 있는 다른 객체에 대한 직접적인 레퍼런스를 가질 필요도 없기 때문에 객체를 단순하게 만들 수 있다.
단점
-요청이 반드시 수행된다는 보장이 없다 >> 적절한 사슬 구성의 필요.
-요청 처리에 걸리는 시간을 정확히 예측하기 힘들다 >> 실시간 시스템과 같이 시간예측이 중요한 경우 검토가 필요.