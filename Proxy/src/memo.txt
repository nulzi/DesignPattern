https://velog.io/@newtownboy/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4-%ED%94%84%EB%A1%9D%EC%8B%9C%ED%8C%A8%ED%84%B4Proxy-Pattern
blog
proxy: 대리자, 대변인.
proxy에게 어떤 일을 대신 시키는 것. 어떤 객체를 사용하고자 할 때, 객체를 직접적으로 참조하지 않고 proxy를 통해 객체에 접근. 객체가 메모리에 존재하지 않아도 기본적인 정보를 참조나 설정할 수 있고, 실제 객체의 기능이 필요한 시점까지 객체의 생성을 미룰 수 있다.
doAction()메소드 사용.
장점
- 사이즈가 큰 객체가 로딩되기 전에도 proxy를 통해 참조
- 실제 객체의 public, protected 메소드를 숨기고 인터페이스를 통해 노출
- 로컬에 있지 않고 떨어져있는 객체를 사용할 수 있다.
- 원래 객체 접근에 대해 사전처리 가능.
단점
- 객체를 빈번하게 생성할 경우 성능 저하
- proxy 내부에서 객체 생성을위해 thread가 생성, 동기화가 구현되어야 하는 경우 성능 저하
- 가독성 저하
종류
- 가상프록시
- 원격프록시
- 보호프록시